import path from 'path';
import glob from 'glob';
import { readFileSync, existsSync } from 'fs';
import { SEP, NODE_MODULES } from './constants';
import { generatePackageMap } from './generate-package-map';
const upgradeMap = (map, upgradeFolder) => {
    const resultMap = {};
    Object.keys(map).forEach((nestedMapping) => {
        resultMap[nestedMapping] = `${upgradeFolder}${SEP}${map[nestedMapping]}`;
    });
    return resultMap;
};
export function generateDeps(rootFolder, depsFolder = NODE_MODULES) {
    const deps = glob.sync(`${rootFolder}${SEP}${depsFolder}${SEP}*${SEP}package.json`);
    const regex = new RegExp(`^${rootFolder}${SEP}(${depsFolder}${SEP}(.*))${SEP}package\.json$`);
    const map = {};
    const packages = {};
    deps.forEach((dep) => {
        if (dep.includes('@types'))
            return;
        const packageConfig = JSON.parse(readFileSync(dep).toString());
        const packageMain = packageConfig['jsnext:main'] || packageConfig.module || packageConfig.main || 'index.js';
        const match = regex.exec(dep);
        if (match) {
            const depFolder = match[1];
            const packageMainFile = path.join(depFolder, packageMain);
            if (!existsSync(`${rootFolder}${SEP}${packageMainFile}`)) {
                throw new Error(`invalid module main '${packageMainFile}' for dependency: '${dep}'`);
            }
            map[match[2]] = depFolder;
            if (packageMainFile) {
                packages[depFolder] = {
                    main: `./${packageMain}`,
                    map: generatePackageMap(rootFolder, depFolder),
                };
            }
            const nestedFolder = `${rootFolder}${SEP}${depFolder}`;
            if (existsSync(`${nestedFolder}${SEP}${NODE_MODULES}`)) {
                const nested = generateDeps(nestedFolder);
                if (Object.keys(nested.map).length) {
                    packages[depFolder] = {
                        map: upgradeMap(nested.map, depFolder)
                    };
                }
                if (Object.keys(nested.packages).length) {
                    Object.keys(nested.packages).forEach((nestedPackageKey) => {
                        const nestedPackage = nested.packages[nestedPackageKey];
                        if (nestedPackage.map) {
                            nestedPackage.map = upgradeMap(nestedPackage.map, depFolder);
                        }
                        packages[`${depFolder}${SEP}${nestedPackageKey}`] = nestedPackage;
                    });
                }
            }
        }
        else {
            throw new Error(`invalid dependecy while generating config: '${dep}'`);
        }
    });
    return {
        map,
        packages
    };
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zeXN0ZW0taDIvZ2VuZXJhdGUtY29uZmlnL2dlbmVyYXRlLWRlcHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFBO0FBQ3ZCLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQTtBQUV2QixPQUFPLEVBQUUsWUFBWSxFQUFHLFVBQVUsRUFBQyxNQUFNLElBQUksQ0FBQTtBQUU3QyxPQUFPLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUMvQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQTtBQUUzRCxNQUFNLFVBQVUsR0FBRyxDQUFDLEdBQWMsRUFBRSxhQUFxQixFQUFFLEVBQUU7SUFDM0QsTUFBTSxTQUFTLEdBQWMsRUFBRSxDQUFBO0lBQy9CLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsYUFBYSxFQUFFLEVBQUU7UUFDekMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEdBQUcsYUFBYSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQTtJQUMxRSxDQUFDLENBQUMsQ0FBQTtJQUNGLE1BQU0sQ0FBQyxTQUFTLENBQUE7QUFDbEIsQ0FBQyxDQUFBO0FBRUQsTUFBTSx1QkFBdUIsVUFBa0IsRUFBRSxhQUFxQixZQUFZO0lBQ2hGLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxVQUFVLEdBQUcsR0FBRyxHQUFHLFVBQVUsR0FBRyxHQUFHLElBQUksR0FBRyxjQUFjLENBQUMsQ0FBQTtJQUNuRixNQUFNLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFVBQVUsR0FBRyxHQUFHLElBQUksVUFBVSxHQUFHLEdBQUcsUUFBUSxHQUFHLGdCQUFnQixDQUFDLENBQUE7SUFDN0YsTUFBTSxHQUFHLEdBQWMsRUFBRSxDQUFBO0lBQ3pCLE1BQU0s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UUFDSCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLElBQUksS0FBSyxDQUFDLCtDQUErQyxHQUFHLEdBQUcsQ0FBQyxDQUFBO1FBQ3hFLENBQUM7SUFDSCxDQUFDLENBQUMsQ0FBQTtJQUVGLE1BQU0sQ0FBQztRQUNMLEdBQUc7UUFDSCxRQUFRO0tBQ1QsQ0FBQTtBQUNILENBQUMiLCJmaWxlIjoiZ2VuZXJhdGUtY29uZmlnL2dlbmVyYXRlLWRlcHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IGdsb2IgZnJvbSAnZ2xvYidcbmltcG9ydCB7IFBhY2thZ2VMaXN0LCBDb25maWdNYXAsIFBhY2thZ2VDb25maWcgfSBmcm9tICdzeXN0ZW1qcydcbmltcG9ydCB7IHJlYWRGaWxlU3luYywgIGV4aXN0c1N5bmN9IGZyb20gJ2ZzJ1xuXG5pbXBvcnQgeyBTRVAsIE5PREVfTU9EVUxFUyB9IGZyb20gJy4vY29uc3RhbnRzJ1xuaW1wb3J0IHsgZ2VuZXJhdGVQYWNrYWdlTWFwIH0gZnJvbSAnLi9nZW5lcmF0ZS1wYWNrYWdlLW1hcCdcblxuY29uc3QgdXBncmFkZU1hcCA9IChtYXA6IENvbmZpZ01hcCwgdXBncmFkZUZvbGRlcjogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHJlc3VsdE1hcCA9IDxDb25maWdNYXA+e31cbiAgT2JqZWN0LmtleXMobWFwKS5mb3JFYWNoKChuZXN0ZWRNYXBwaW5nKSA9PiB7XG4gICAgcmVzdWx0TWFwW25lc3RlZE1hcHBpbmddID0gYCR7dXBncmFkZUZvbGRlcn0ke1NFUH0ke21hcFtuZXN0ZWRNYXBwaW5nXX1gXG4gIH0pXG4gIHJldHVybiByZXN1bHRNYXBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlRGVwcyhyb290Rm9sZGVyOiBzdHJpbmcsIGRlcHNGb2xkZXI6IHN0cmluZyA9IE5PREVfTU9EVUxFUykge1xuICBjb25zdCBkZXBzID0gZ2xvYi5zeW5jKGAke3Jvb3RGb2xkZXJ9JHtTRVB9JHtkZXBzRm9sZGVyfSR7U0VQfSoke1NFUH1wYWNrYWdlLmpzb25gKVxuICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYF4ke3Jvb3RGb2xkZXJ9JHtTRVB9KCR7ZGVwc0ZvbGRlcn0ke1NFUH0oLiopKSR7U0VQfXBhY2thZ2VcXC5qc29uJGApXG4gIGNvbnN0IG1hcCA9IDxDb25maWdNYXA+e31cbiAgY29uc3QgcGFja2FnZXMgPSA8UGFja2FnZUxpc3Q8UGFja2FnZUNvbmZpZz4+e31cblxuXG4gIGRlcHMuZm9yRWFjaCgoZGVwOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoZGVwLmluY2x1ZGVzKCdAdHlwZXMnKSkgcmV0dXJuXG5cbiAgICBjb25zdCBwYWNrYWdlQ29uZmlnID0gSlNPTi5wYXJzZShyZWFkRmlsZVN5bmMoZGVwKS50b1N0cmluZygpKVxuICAgIGNvbnN0IHBhY2thZ2VNYWluID0gcGFja2FnZUNvbmZpZ1snanNuZXh0Om1haW4nXSB8fCBwYWNrYWdlQ29uZmlnLm1vZHVsZSB8fCBwYWNrYWdlQ29uZmlnLm1haW4gfHwgJ2luZGV4LmpzJ1xuICAgIGNvbnN0IG1hdGNoID0gcmVnZXguZXhlYyhkZXApXG5cbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIGNvbnN0IGRlcEZvbGRlciA9IG1hdGNoWzFdXG4gICAgICBjb25zdCBwYWNrYWdlTWFpbkZpbGUgPSBwYXRoLmpvaW4oZGVwRm9sZGVyLCBwYWNrYWdlTWFpbilcbiAgICAgIGlmICghZXhpc3RzU3luYyhgJHtyb290Rm9sZGVyfSR7U0VQfSR7cGFja2FnZU1haW5GaWxlfWApKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBtb2R1bGUgbWFpbiAnJHtwYWNrYWdlTWFpbkZpbGV9JyBmb3IgZGVwZW5kZW5jeTogJyR7ZGVwfSdgKVxuICAgICAgfVxuICAgICAgbWFwW21hdGNoWzJdXSA9IGRlcEZvbGRlclxuXG4gICAgICBpZiAocGFja2FnZU1haW5GaWxlKSB7XG4gICAgICAgIHBhY2thZ2VzW2RlcEZvbGRlcl0gPSB7XG4gICAgICAgICAgbWFpbjogYC4vJHtwYWNrYWdlTWFpbn1gLFxuICAgICAgICAgIG1hcDogZ2VuZXJhdGVQYWNrYWdlTWFwKHJvb3RGb2xkZXIsIGRlcEZvbGRlciksXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgbmVzdGVkRm9sZGVyID0gYCR7cm9vdEZvbGRlcn0ke1NFUH0ke2RlcEZvbGRlcn1gXG4gICAgICBpZiAoZXhpc3RzU3luYyhgJHtuZXN0ZWRGb2xkZXJ9JHtTRVB9JHtOT0RFX01PRFVMRVN9YCkpIHtcbiAgICAgICAgY29uc3QgbmVzdGVkID0gZ2VuZXJhdGVEZXBzKG5lc3RlZEZvbGRlcilcblxuICAgICAgICBpZiAoT2JqZWN0LmtleXMobmVzdGVkLm1hcCkubGVuZ3RoKSB7XG4gICAgICAgICAgcGFja2FnZXNbZGVwRm9sZGVyXSA9IHtcbiAgICAgICAgICAgIG1hcDogdXBncmFkZU1hcChuZXN0ZWQubWFwLCBkZXBGb2xkZXIpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKG5lc3RlZC5wYWNrYWdlcykubGVuZ3RoKSB7XG4gICAgICAgICAgT2JqZWN0LmtleXMobmVzdGVkLnBhY2thZ2VzKS5mb3JFYWNoKChuZXN0ZWRQYWNrYWdlS2V5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXN0ZWRQYWNrYWdlID0gbmVzdGVkLnBhY2thZ2VzW25lc3RlZFBhY2thZ2VLZXldXG4gICAgICAgICAgICBpZiAobmVzdGVkUGFja2FnZS5tYXApIHtcbiAgICAgICAgICAgICAgbmVzdGVkUGFja2FnZS5tYXAgPSB1cGdyYWRlTWFwKG5lc3RlZFBhY2thZ2UubWFwLCBkZXBGb2xkZXIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYWNrYWdlc1tgJHtkZXBGb2xkZXJ9JHtTRVB9JHtuZXN0ZWRQYWNrYWdlS2V5fWBdID0gbmVzdGVkUGFja2FnZVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGRlcGVuZGVjeSB3aGlsZSBnZW5lcmF0aW5nIGNvbmZpZzogJyR7ZGVwfSdgKVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4ge1xuICAgIG1hcCxcbiAgICBwYWNrYWdlc1xuICB9XG59XG4iXX0=
