(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('http2'), require('fs'), require('path'), require('glob')) :
	typeof define === 'function' && define.amd ? define('index', ['exports', 'http2', 'fs', 'path', 'glob'], factory) :
	(factory((global.index = global.index || {}),global.http2,global.fs,global.path,global.glob));
}(this, (function (exports,http2,fs,path,glob) { 'use strict';

http2 = 'default' in http2 ? http2['default'] : http2;
var fs__default = 'default' in fs ? fs['default'] : fs;
path = 'default' in path ? path['default'] : path;
glob = 'default' in glob ? glob['default'] : glob;

const server = http2.createSecureServer({
    key: fs__default.readFileSync('certs/localhost-privkey.pem'),
    cert: fs__default.readFileSync('certs/localhost-cert.pem'),
});
server.on('error', err => console.error(err));
server.on('socketError', err => console.error(err));
const index = fs__default.openSync('src/system-h2/index.html', 'r');
const test = fs__default.openSync('src/system-h2/test.js', 'r');
server.on('stream', (stream, reqHeaders) => {
    if (reqHeaders[':path'] === '/') {
        stream.pushStream({ ':path': '/test.js' }, (stream) => {
            const stat = fs__default.fstatSync(test);
            const resHeaders = {
                'content-length': stat.size,
                'last-modified': stat.mtime.toUTCString(),
                'content-type': 'text/javascript',
            };
            stream.respondWithFD(test, resHeaders);
        });
        const stat = fs__default.fstatSync(index);
        const resHeaders = {
            'content-length': stat.size,
            'last-modified': stat.mtime.toUTCString(),
            'content-type': 'text/html',
        };
        stream.respondWithFD(index, resHeaders);
    }
    else if (reqHeaders[':path'] === '/test.js') {
        const stat = fs__default.fstatSync(test);
        const resHeaders = {
            'content-length': stat.size,
            'last-modified': stat.mtime.toUTCString(),
            'content-type': 'text/javascript',
        };
        stream.respondWithFD(test, resHeaders);
    }
    else {
        stream.end();
    }
});

const SEP = path.sep;
const JS_EXTENSIONS = 'js|ts|jsx|tsx|mjs';
const NODE_MODULES = 'node_modules';

function generatePackageMap(rootFolder, packagePath) {
    const packageMap = {};
    const files = glob.sync(`${rootFolder}${SEP}${packagePath}${SEP}**${SEP}*.@(${JS_EXTENSIONS})`);
    const regex = new RegExp(`^${rootFolder}${SEP}${packagePath}${SEP}(.*)\\.\\w+$`);
    files.forEach((file) => {
        if (file.match(/index\.\w+$/))
            return;
        const match = regex.exec(file);
        if (match) {
            const mapKey = `./${match[1]}`;
            packageMap[mapKey] = file.replace(`${rootFolder}${SEP}`, '');
        }
    });
    return packageMap;
}

function generateSource(rootFolder, relativeSourceFolder) {
    const files = glob.sync(`${rootFolder}${SEP}${relativeSourceFolder}${SEP}**${SEP}index.@(${JS_EXTENSIONS})`);
    const regex = new RegExp(`^${rootFolder}${SEP}(${relativeSourceFolder}${SEP}(.*))${SEP}(index.*)$`);
    const map = {};
    const packages = {};
    files.forEach((file) => {
        const match = regex.exec(file);
        if (match) {
            const packagePath = match[1];
            map[match[2]] = packagePath;
            packages[packagePath] = {
                main: `./${match[3]}`,
                map: generatePackageMap(rootFolder, packagePath),
            };
        }
        else {
            throw new Error(`invalid file while generating config: '${file}'`);
        }
    });
    return {
        map,
        packages,
    };
}

const upgradeMap = (map, upgradeFolder) => {
    const resultMap = {};
    Object.keys(map).forEach((nestedMapping) => {
        resultMap[nestedMapping] = `${upgradeFolder}${SEP}${map[nestedMapping]}`;
    });
    return resultMap;
};
function generateDeps(rootFolder, depsFolder = NODE_MODULES) {
    const deps = glob.sync(`${rootFolder}${SEP}${depsFolder}${SEP}*${SEP}package.json`);
    const regex = new RegExp(`^${rootFolder}${SEP}(${depsFolder}${SEP}(.*))${SEP}package\.json$`);
    const map = {};
    const packages = {};
    deps.forEach((dep) => {
        if (dep.includes('@types'))
            return;
        const packageConfig = JSON.parse(fs.readFileSync(dep).toString());
        const packageMain = packageConfig['jsnext:main'] || packageConfig.module || packageConfig.main || 'index.js';
        const match = regex.exec(dep);
        if (match) {
            const depFolder = match[1];
            const packageMainFile = path.join(depFolder, packageMain);
            if (!fs.existsSync(`${rootFolder}${SEP}${packageMainFile}`)) {
                throw new Error(`invalid module main '${packageMainFile}' for dependency: '${dep}'`);
            }
            map[match[2]] = depFolder;
            if (packageMainFile) {
                packages[depFolder] = {
                    main: `./${packageMain}`,
                    map: generatePackageMap(rootFolder, depFolder),
                };
            }
            const nestedFolder = `${rootFolder}${SEP}${depFolder}`;
            if (fs.existsSync(`${nestedFolder}${SEP}${NODE_MODULES}`)) {
                const nested = generateDeps(nestedFolder);
                if (Object.keys(nested.map).length) {
                    packages[depFolder] = {
                        map: upgradeMap(nested.map, depFolder)
                    };
                }
                if (Object.keys(nested.packages).length) {
                    Object.keys(nested.packages).forEach((nestedPackageKey) => {
                        const nestedPackage = nested.packages[nestedPackageKey];
                        if (nestedPackage.map) {
                            nestedPackage.map = upgradeMap(nestedPackage.map, depFolder);
                        }
                        packages[`${depFolder}${SEP}${nestedPackageKey}`] = nestedPackage;
                    });
                }
            }
        }
        else {
            throw new Error(`invalid dependecy while generating config: '${dep}'`);
        }
    });
    return {
        map,
        packages
    };
}

const DEFAULT_OPTIONS = {
    rootFolder: '',
    sourceFolder: 'src',
    depsFolder: 'node_modules',
};
function prependRootToMap(rootFolder, map) {
    Object.keys(map).forEach((key) => {
        const mapping = map[key];
        if (typeof mapping === 'string') {
            map[key] = path.join(rootFolder, mapping);
        }
    });
    return map;
}
function prependRootToPackages(rootFolder, packages) {
    const resultPackages = {};
    Object.keys(packages).forEach((key) => {
        const _package = packages[key];
        resultPackages[path.join(rootFolder, key)] = _package;
        if (_package.map) {
            _package.map = prependRootToMap(rootFolder, _package.map);
        }
    });
    return resultPackages;
}
function generateConfig$1(options) {
    const { sourceFolder, rootFolder, depsFolder } = Object.assign({}, DEFAULT_OPTIONS, options);
    const sourceConfig = generateSource(rootFolder, sourceFolder);
    const depConfig = generateDeps(rootFolder);
    const result = {
        map: prependRootToMap(rootFolder, Object.assign({}, sourceConfig.map, depConfig.map)),
        packages: prependRootToPackages(rootFolder, Object.assign({}, sourceConfig.packages, depConfig.packages))
    };
    return result;
}

console.log('Server listening on Port 3000');
server.listen(3000);

exports.generateConfig = generateConfig$1;

Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf8;base64,
